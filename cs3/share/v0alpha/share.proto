// CS3 Share API
// Copyright (C) 2018  CERN IT-ST
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

syntax = "proto3";

package cs3.sharev0alpha;

option csharp_namespace = "CS3.ShareV0Alpha";
option go_package = "sharev0alphapb";
option java_multiple_files = true;
option java_outer_classname = "ShareProto";
option java_package = "com.cs3.sharev0alpha";
option objc_class_prefix = "CBOXAB";
option php_namespace = "CS3\\ShareV0Alpha";

import "cs3/rpc/status.proto";
import "cs3/share/v0alpha/resources.proto";

// Manage shares of the authenticated user.
// 
service ShareService {
  // TODO: specify the response status if a share was already created for the tuple (shared_resource,recipent, owner)
  // TODO: specify the response status if the authenticated user/owner does not have access permissions to the shared_resource.
  // New shares are created in the PENDING state.
  rpc CreateShare(CreateShareRequest) returns (CreateShareResponse);

  // Remove the share.
  rpc RemoveShare(RemoveShareRequest) returns (RemoveShareResponse);

  // Get share information for a single share.
  rpc GetShare(GetShareRequest) returns (GetShareResponse);

  // List shares for a given storage resource.
  // This only lists the shares in the context of the current authenticated user (so for example, if some other user created shares 
  // for the same resource, these will not be listed).
  rpc ListShares(ListSharesRequest) returns (ListSharesResponse);

  // List all shares created and owned by the authenticated user.
  rpc ListAllCreatedShares(ListAllSharesRequest) returns (ListSharesResponse);

  // List all shares received by the authenticated user.
  rpc ListAllReceivedShares(ListAllSharesRequest) returns (ListSharesResponse);

  // Update share attributes such as granted_permissions or display_name.
  rpc UpdateShare(UpdateShareRequest) returns (UpdateShareResponse);

  // Updated by a recipient.
  // TODO: in case of group shares that means that a new object must be created!
  rpc AcceptShare(AcceptReceivedShareRequest) returns (AcceptReceivedShareResponse);
  rpc RejectShare(RejectReceivedShareRequest) returns (RejectReceivedShareResponse);
}

message CreateShareRequest {

   // Unique identifier of the shared resource.
   ResourceId shared_resource = 1;

   // Permissions for the share_recipent to use the resource (and possibly take further sharing actions).
   SharePermissionSet granted_permissions = 2;

   // A person or group who receives the share.
   Grantee recipent = 3;
}

message CreateShareResponse {
  cs3.rpc.Status status = 1;
  Share share = 2;
}

message UpdateShareRequest{
  ShareRef share_ref = 1;
  oneof update {
    Permissions permissions = 1;
    string display_name = 2;
    bool accept = 3; // true => SHARE_STATE_ACCEPTED, false => SHARE_STATE_REJECTED
  }
}

message UpdateSharePermissionsResponse {
  cs3.rpc.Status status = 1;
  Share share = 2;
}

message ListSharesRequest {
  ResourceId shared_resource = 1;
}

message ListSharesResponse {
  cs3.rpc.Status status = 1;
  repeated Share share = 2;
}

message RemoveShareRequest {
  string share_id = 1;
}

message RemoveShareResponse {
  cs3.rpc.Status status = 1;
}

message GetShareRequest {
  ShareRef share_ref = 1;
}

message GetShareResponse {
  cs3.rpc.Status status = 1;
  Share share = 2;
}

message ListAllSharesRequest {}

// TODO: FIXME
message AcceptReceivedShareRequest {
  string share_id = 1;
}

// TODO: FIXME
message AcceptReceivedShareResponse {
  cs3.rpc.Status status = 1;
}

// TODO: FIXME
message RejectReceivedShareRequest {
  string share_id = 1;
}

// TODO: FIXME
message RejectReceivedShareResponse {
  cs3.rpc.Status status = 1;
}
