// CS3 StorageProvider API
// Copyright (C) 2018  CERN IT-ST
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

syntax = "proto3";

package cs3.storageproviderv0alpha;

option csharp_namespace = "CS3.StorageProviderV0Alpha";
option go_package = "storageproviderv0alphapb";
option java_multiple_files = true;
option java_outer_classname = "StorageProviderProto";
option java_package = "com.cs3.storageproviderv0alpha";
option objc_class_prefix = "CBOXAB";
option php_namespace = "CS3\\StorageProviderV0Alpha";

import "cs3/rpc/status.proto";
import "cs3/storageprovider/v0alpha/resources.proto";

service StorageProviderService {
  rpc Deref(DerefRequest) returns (DerefResponse);
  rpc CreateDirectory(CreateDirectoryRequest) returns (CreateDirectoryResponse);
  rpc Delete(DeleteRequest) returns (DeleteResponse);
  rpc Move(MoveRequest) returns (MoveResponse);
  rpc Stat(StatRequest) returns (StatResponse);
  rpc List(ListRequest) returns (stream ListResponse);
  rpc StartWriteSession(StartWriteSessionRequest) returns (StartWriteSessionResponse);
  rpc Write(stream WriteRequest) returns (WriteResponse);
  rpc FinishWriteSession(FinishWriteSessionRequest) returns (FinishWriteSessionResponse);
  rpc Read(ReadRequest) returns (stream ReadResponse);
  rpc ListVersions(ListVersionsRequest) returns (stream ListVersionsResponse);
  rpc ReadVersion(ReadVersionRequest) returns (stream ReadVersionResponse);
  rpc RestoreVersion(RestoreVersionRequest) returns (RestoreVersionResponse);
  rpc ListRecycle(ListRecycleRequest) returns (stream ListRecycleResponse);
  rpc RestoreRecycleItem(RestoreRecycleItemRequest) returns (RestoreRecycleItemResponse);
  rpc PurgeRecycle(PurgeRecycleRequest) returns (PurgeRecycleResponse);
  rpc SetACL(SetACLRequest) returns (SetACLResponse);
  rpc UpdateACL(UpdateACLRequest) returns (UpdateACLResponse);
  rpc UnsetACL(UnsetACLRequest) returns (UnsetACLResponse);
  //rpc ListACLs(ListACLsRequest) returns (ListACLsResponse);
  rpc GetQuota(GetQuotaRequest) returns (GetQuotaResponse);
}

message DerefRequest {
  string fid = 1;
}

message DerefResponse {
  cs3.rpc.Status status = 1;
  string filename = 2;
}

message CreateDirectoryRequest {
  string filename = 1;
}

message CreateDirectoryResponse {
  cs3.rpc.Status status = 1;
}

message DeleteRequest {
  string filename = 1;
}

message DeleteResponse {
  cs3.rpc.Status status = 1;
}

message MoveRequest {
  string source_filename = 1;
  string target_filename = 2;
}

message MoveResponse {
  cs3.rpc.Status status = 1;
}

message StatRequest {
  string filename = 1;
}

message StatResponse {
  cs3.rpc.Status status = 1;
  Metadata metadata = 2;
}

message ListRequest {
  string filename = 1;
}

message ListResponse {
  cs3.rpc.Status status = 1;
  Metadata metadata = 2;
}

message StartWriteSessionRequest {}

message StartWriteSessionResponse {
  cs3.rpc.Status status = 1;
  string session_id = 2;
}

message WriteRequest {
  string session_id = 1;
  uint64 length = 2;
  uint64 offset = 3;
  bytes data = 4;
}

message WriteResponse {
  cs3.rpc.Status status = 1;
  uint64 written_bytes = 2;
  uint64 number_chunks = 3;
}

message FinishWriteSessionRequest {
  string session_id = 1;
  string filename = 2;
  string checksum = 3;
}

message FinishWriteSessionResponse {
  cs3.rpc.Status status = 1;
}

message ReadRequest {
  string filename = 1;
}

message ReadResponse {
  cs3.rpc.Status status = 1;
  DataChunk data_chunk = 2;
}

message ListVersionsRequest {
  string filename = 1;
}

message ListVersionsResponse {
  cs3.rpc.Status status = 1;
  Version version = 2;
}

message ReadVersionRequest {
  string filename = 1;
  string version_key = 2;
}

message ReadVersionResponse {
  cs3.rpc.Status status = 1;
  DataChunk data_chunk = 2;
}

message RestoreVersionRequest {
  string filename = 1;
  string version_key = 2;
}

message RestoreVersionResponse {
  cs3.rpc.Status status = 1;
}

message ListRecycleRequest {
  string filename = 1;
}

message ListRecycleResponse {
  cs3.rpc.Status status = 1;
  RecycleItem recycle_item = 2;
}

message RestoreRecycleItemRequest {
  string filename = 1;
  string restore_key = 2;
}

message RestoreRecycleItemResponse {
  cs3.rpc.Status status = 1;
  RecycleItem recycle_item = 2;
}

message PurgeRecycleRequest {
  string filename = 1;
}

message PurgeRecycleResponse {
  cs3.rpc.Status status = 1;
}

message SetACLRequest {
  string filename = 1;
  ACL acl = 2;
}

message SetACLResponse {
  cs3.rpc.Status status = 1;
}

message UpdateACLRequest {
  string filename = 1;
  ACL acl = 2;
}

message UpdateACLResponse {
  cs3.rpc.Status status = 1;
}

message UnsetACLRequest {
  string filename = 1;
  ACL acl = 3;
}

message UnsetACLResponse {
  cs3.rpc.Status status = 1;
}

message GetQuotaRequest {
  string filename = 1;
}

message GetQuotaResponse {
  cs3.rpc.Status status = 1;
  uint64 total_bytes = 2;
  uint64 used_bytes = 3;
}

message ListACLsRequest {
  string filename = 1;
}

message ListACLsResponse {
  cs3.rpc.Status stats = 1;
  repeated ACL acls = 2;
}
