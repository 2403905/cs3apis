// CS3 StorageProvider API
// Copyright (C) 2018  CERN IT-ST
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

syntax = "proto3";

package cs3.storageproviderv0alpha;

option csharp_namespace = "CS3.StorageProviderV0Alpha";
option go_package = "storageproviderv0alphapb";
option java_multiple_files = true;
option java_outer_classname = "ResourcesProto";
option java_package = "com.cs3.storageproviderv0alpha";
option objc_class_prefix = "CBOXAB";
option php_namespace = "CS3\\StorageProviderV0Alpha";

import "cs3/types/types.proto";

// Represents the information (metadata) about
// a resource.
message ResourceInfo {
  // OPTIONAL.
  // Opaque information.
  cs3.types.Opaque opaque = 1;
  // REQUIRED.
  // The type of the resource (container, file, ...)
  // See the enum ResourceType for all possible types.
  ResourceType type = 2;
  // OPTIONAL.
  // Opaque information.
  ResourceId id = 3;
  // REQUIRED.
  // The checksum for the resource.
  ResourceChecksum checksum = 4;
  // REQUIRED.
  // As decribed in https://tools.ietf.org/html/rfc7232#section-2.3
  string etag = 5;
  // REQUIRED.
  // As described in https://tools.ietf.org/html/rfc2045#page-7
  string mime = 6;
  // REQUIRED.
  // The start time range to query for recycle items.
  // The value is the Unix Epoch timestamp in seconds.
  uint64 mtime = 7;
  // REQUIRED.
  // The path for the resource.
  // It MUST start with the slash character (/).
  string path = 8;
  // REQUIRED.
  // The set of permissions for the resource.
  ResourcePermissionSet permission_set = 9;
  // REQUIRED.
  // The size of the resource in bytes.
  uint64 size = 10;
}

// The available types of resources.
enum ResourceType {
  RESOURCE_TYPE_INVALID = 0;
  // The container type represents a type
  // that can contain another types.
  // Service implementors usually map this type
  // to folders (local filesystem) or buckets
  // (Amazon S3).
  RESOURCE_TYPE_CONTAINER = 1;
  // The file type represents a type
  // that holds arbitrary data.
  // Service implementors usually map this type
  // to files (local filesystem) or objects
  // (Amazon S3).
  RESOURCE_TYPE_FILE = 2;
}

// The checksum to use to verify 
// the integrity of a resource.
message ResourceChecksum {
  // The type of checksum to use.
  enum ChecksumType {
    CHECKSUM_TYPE_INVALID = 0;
    // unset means no checksum is set.
    CHECKSUM_TYPE_UNSET = 1;
    // Use Adler32 checksum.
    CHECKSUM_TYPE_ADLER32 = 2;
    // Use MD5 checksum.
    CHECKSUM_TYPE_MD5 = 3;
  }
  // REQUIRED.
  // The type of checksum to use.
  // If no checksum is provided,
  // type MUST be CHECKSUM_TYPE_UNSET.
  ChecksumType type = 1;
  // MUST be specified if type is not
  // CHECKSUM_TYPE_UNSET or type is not
  // CHECKSUM_TYPE_INVALID.
  // MUST be the hexadecimal representation of the cheksum.
  string sum = 2;
}

// The mechanism to identify a resource 
// in the storage provider namespace. 
message Reference {
  // One of the specifications MUST be specified.
  oneof spec {
    // The path to the resource.
    // MUST start with the slash character (/).
    string path = 1;
    // The id for the resource.
    // MUST NOT start with the slash character (/).
    ResourceId id = 2;
  }
}

// A resource id identifies uniquely a 
// resource in the storage provider namespace.
// A ResourceId MUST be unique in the storage provider. 
message ResourceId {
  // REQUIRED.
  // The storage id of the storage provider.
  string storage_id = 1;
  // REQUIRED.
  // The internal id used by service implementor to
  // uniquely identity the resource in the internal
  // implementation of the service.
  string opaque_id = 2;
}

// The representation of permissions attached to a resource.
message ResourcePermissionSet {
  bool list_container = 1;
  bool create_container = 2;
  bool delete = 3;
}

// A grant grants permissions
// to a resource to a grantee.
message Grant {
  // REQUIRED.
  // The grantee of the grant.
  Grantee grantee = 1;
  // REQUIRED.
  // The permissions for the grant.
  ResourcePermissionSet resource_permission_set = 2;
}

// A grantee is the received of grant.
message Grantee {
  // REQUIRED.
  // The type of the grantee.
  GranteeType type = 1;
  // The unique id for the grantee.
  string id = 2;
}

// The type of the grantee.
enum GranteeType {
  GRANTEE_TYPE_INVALID = 0;
  // This type represents an individual.
  GRANTEE_TYPE_USER = 1;
  // This type represents a group of individuals.
  GRANTEE_TYPE_GROUP = 2;
}

// The information for a file version.
// TODO: make size and mtime OPTIONAL?
message FileVersion {
  // OPTIONAL.
  // Opaque information.
  cs3.types.Opaque opaque = 1;
  // MUST the specified.
  // The key to identify the version.
  string key = 3;
  // REQUIRED.
  // The size in bytes of the file version.
  uint64 size = 4;
  // REQUIRED.
  // The Unix Epoch timestamp in seconds.
  uint64 mtime = 5;
}

// A recycle items represents the information
// of a deleted resource.
message RecycleItem {
  // OPTIONAL.
  // Opaque information.
  cs3.types.Opaque opaque = 1;
  // REQUIRED.
  // The type of the resource.
  ResourceType type = 2;
  // REQUIRED.
  // The key to identify the deleted resource.
  string key = 3;
  // REQUIRED.
  // The original path of the deleted resource.
  string path = 4;
  // OPTIONAL.
  // The size of the deleted resource.
  uint64 size = 5;
  // REQUIRED.
  // The deletion time of the resource
  // in Unix Epoch timestamp in seconds.
  uint64 deletion_ts = 6;
}
