// CS3 PublicShare API
// Copyright (C) 2018  CERN IT-ST
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

syntax = "proto3";

package cs3.publicsharev0alpha;

option csharp_namespace = "CS3.PublicShareV0Alpha";
option go_package = "publicsharev0alphapb";
option java_multiple_files = true;
option java_outer_classname = "ResourcesProto";
option java_package = "com.cs3.publicsharev0alpha";
option objc_class_prefix = "CBOXPUBLICSHARE";
option php_namespace = "CS3\\PublicShareV0Alpha";

import "cs3/sharetypes/sharetypes.proto";
import "cs3/storageprovider/v0alpha/resources.proto";
import "cs3/types/types.proto";

//
//message PublicShare {
//  string id = 1;
//  string token = 2;
//  string filename = 3;
//  FileType file_type = 4;
//  uint64 expiration = 5;
//  bool password_protected = 6;
//  Permission permission = 7;
//  string display_name = 8;
//  string owner = 9;
//}
//

// Public share are relationships between a resource owner 
// (usually the authenticated user) who grants permissions to a recipient (grantee) 
// on a specified resource (resource_id). UserShares represents both user and groups.
// TODO(labkode): do we need to have  resource_type stored on the share?
// This is not needed if when getting the shares a stat operation is launched against the
// the storage provider.
message PublicShare {
  // REQUIRED.
  // Opaque unique identifier of the share.
  PublicShareId id = 1;
  // REQUIRED.
  // The unlisted token to give public access
  // to the public share.
  string token = 2;
  // REQUIRED.
  // Unique identifier of the shared resource.
  cs3.storageproviderv0alpha.ResourceId resource_id = 3;
  // REQUIRED.
  // Permissions for the grantee to use 
  // the resource.
  PublicSharePermissions permissions = 4;
  // REQUIRED.
  // Uniquely identifies the owner of the share 
  // (the resource owner at the time of creating the share).
  // In case the ownership of the underlying resource changes
  // the share owner field MAY change to reflect the change of ownsership.
  cs3.types.UserId owner = 5;
  // REQUIRED.
  // Uniquely identifies a principal who initiates the share creation.
  // A creator can create shares on behalf of the owner (because of re-sharing, 
  // because belonging to special groups, ...).
  // Creator and owner often result in being the same principal.
  cs3.types.UserId creator = 6;
  // REQUIRED.
  // Creation time of the share.
  cs3.types.Timestamp ctime = 7;
  // REQUIRED.
  // Last modification time of the share.
  cs3.types.Timestamp mtime = 8;
  // REQUIRED.
  // Determines if the public share is password protected or not.
  bool password_protected = 9;
  // OPTIONAL.
  // The expiration time for the public share.
  cs3.types.Timestamp expiration = 10;
  // OPTIONAL.
  // Display name for the shared resource (such as file, directory basename or any 
  // user defined name).
  // The display name MAY be different than the actual resource basename.
  // This field is only useful for informational purposes, like for example,
  // setting the window title in a public share HTML page.
  string display_name = 11;
}

// Represents the information of the share provider.
message ProviderInfo {
  // OPTIONAL.
  // Opaque information.
  cs3.types.Opaque opaque = 1;
  // REQUIRED.
  // The share type that will become part of the 
  // share id.
  // For example, if the share_type is "user", shares obtained
  // from this storage provider will have a share id like "user:1234"
  // or "ocm:1234" or "group:8838".
  cs3.sharetypes.ShareType share_type = 2;
  // REQUIRED.
  // The address where the share provider can be reached.
  // For example, tcp://localhost:1099.
  string address = 3;
  // OPTIONAL.
  // Information to describe the functionalities
  // offered by the share provider. Meant to be read
  // by humans.
  string description = 4;
}

// The permissions for a share.
message PublicSharePermissions {
  cs3.storageproviderv0alpha.ResourcePermissions permissions = 1;
  // TODO(labkode): additional permissions for shares like re-sharing

}

// A share id identifies uniquely a // share in the share provider namespace.
// A ShareId MUST be unique inside the share provider.
message PublicShareId {
  // REQUIRED.
  // The share type.
  cs3.sharetypes.ShareType type = 1;
  // REQUIRED.
  // The internal id used by service implementor to
  // uniquely identity the share in the internal
  // implementation of the service.
  string opaque_id = 2;
}

// The mechanism to identify a share 
// in the share provider namespace. 
message PublicShareReference {
  // REQUIRED.
  // One of the specifications MUST be specified.
  oneof spec {
    // The id of the share.
    PublicShareId id = 1;
    // The token to identify the public share.
    string token = 2;
  }
}
