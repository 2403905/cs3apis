// CS3 PublicShare API
// Copyright (C) 2018  CERN IT-ST
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

syntax = "proto3";

package cs3.publicsharev0alpha;

option csharp_namespace = "CS3.PublicShareV0Alpha";
option go_package = "publicsharev0alphapb";
option java_multiple_files = true;
option java_outer_classname = "PublicshareProto";
option java_package = "com.cs3.publicsharev0alpha";
option objc_class_prefix = "CBOXAB";
option php_namespace = "CS3\\PublicShareV0Alpha";

import "cs3/publicshare/v0alpha/resources.proto";
import "cs3/rpc/status.proto";
import "cs3/sharetypes/sharetypes.proto";
import "cs3/storageprovider/v0alpha/resources.proto";
import "cs3/types/types.proto";

// PublicShare Provider API
// 
// The Public Share Provider API is meant to manipulate public shares
// also called public links.
// 
// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
// NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and
// "OPTIONAL" in this document are to be interpreted as described in
// RFC 2119.
// 
// The following are global requirements that apply to all methods:
// Any method MUST return CODE_OK on a succesful operation.
// Any method MAY return NOT_IMPLEMENTED.
// Any method MAY return INTERNAL.
// Any method MAY return UNKNOWN.
// Any method MAY return UNAUTHENTICATED.
service PublicShareProviderService {
  // Returns the information for this provider.
  rpc GetProvider(GetProviderRequest) returns (GetProviderResponse);
  // Creates a new share.
  // MUST return CODE_NOT_FOUND if the resource reference does not exist.
  // MUST return CODE_ALREADY_EXISTS if the share already exists for the 4-tuple consisting of
  // (owner, shared_resource, grantee). 
  // New shares MUST be created in the state SHARE_STATE_PENDING.
  rpc CreatePublicShare(CreatePublicShareRequest) returns (CreatePublicShareResponse);
  // Removes a share.
  // MUST return CODE_NOT_FOUND if the share reference does not exist.
  rpc RemovePublicShare(RemovePublicShareRequest) returns (RemovePublicShareResponse);
  // Gets share information for a single share.
  // MUST return CODE_NOT_FOUND if the share reference does not exist.
  rpc GetPublicShare(GetPublicShareRequest) returns (GetPublicShareResponse);
  // Gets share information for a single share by its unlisted token.
  // MUST return CODE_NOT_FOUND if the share does not exist.
  rpc GetPublicShareByToken(GetPublicShareByTokenRequest) returns (GetPublicShareByTokenResponse);
  // List the shares the authenticated principal has created,
  // both as owner and creator. If a filter is specified, only 
  // shares satisfying the filter MUST be returned.
  rpc ListPublicShares(ListPublicSharesRequest) returns (ListPublicSharesResponse);
  // Updates a share.
  // MUST return CODE_NOT_FOUND if the share reference does not exist.
  rpc UpdatePublicShare(UpdatePublicShareRequest) returns (UpdatePublicShareResponse);
}

message GetProviderRequest {
  // OPTIONAL.
  // Opaque information.
  cs3.types.Opaque opaque = 1;
}

message GetProviderResponse {
  // REQUIRED.
  // The response status.
  cs3.rpc.Status status = 1;
  // OPTIONAL.
  // Opaque information.
  cs3.types.Opaque opaque = 2;
  // REQUIRED.
  // The information for the share provider.
  cs3.sharetypes.ProviderInfo info = 3;
}

message CreatePublicShareRequest {
  // OPTIONAL.
  // Opaque information.
  cs3.types.Opaque opaque = 1;
  // REQUIRED.
  // The unique identifier for the shared storage resource.
  cs3.storageproviderv0alpha.ResourceId resource_id = 2;
  // REQUIRED.
  // The permissions for the share.
  PublicSharePermissions permissions = 3;
  // OPTIONAL.
  // A password to protect the access to the public share.
  string password = 4;
  // OPTIONAL.
  // An expiration date to protect the access to the public share.
  cs3.types.Timestamp expiration = 5;
}

message CreatePublicShareResponse {
  // REQUIRED.
  // The response status.
  cs3.rpc.Status status = 1;
  // OPTIONAL.
  // Opaque information.
  cs3.types.Opaque opaque = 2;
  // REQUIRED.
  // The created share.
  PublicShare share = 3;
}

message UpdatePublicShareRequest {
  // OPTIONAL.
  // Opaque information.
  cs3.types.Opaque opaque = 1;
  // REQUIRED.

  // REQUIRED.
  // The reference to the public share.
  PublicShareReference ref = 2;
  // Available fields to update.
  message UpdateField {
    // One of the update fields MUST be specified.
    oneof field {
      // Update the permissions.
      PublicSharePermissions permissions = 2;
      // Update the password.
      string password = 3;
      // Update the expiration date.
      cs3.types.Timestamp expiration = 4;
    }
  }
  // REQUIRED.
  // The field to be updated.
  UpdateField field = 5;
}

message UpdatePublicShareResponse {
  // REQUIRED.
  // The response status.
  cs3.rpc.Status status = 1;
  // OPTIONAL.
  // Opaque information.
  cs3.types.Opaque opaque = 2;
  // REQUIRED.
  // The updated public share.
  PublicShare share = 3;
}

message ListPublicSharesRequest {
  // OPTIONAL.
  // Opaque information.
  cs3.types.Opaque opaque = 1;
  // represents a filter to apply to the request.
  message Filter {
    enum Type {
      LIST_PUBLIC_SHARES_REQUEST_FILTER_TYPE_INVALID = 0;
      LIST_PUBLIC_SHARES_REQUEST_FILTER_TYPE_RESOURCE_ID = 1;
      LIST_PUBLIC_SHARES_REQUEST_FILTER_TYPE_OWNER = 2;
      LIST_PUBLIC_SHARES_REQUEST_FILTER_TYPE_CREATOR = 3;
    }
    Type type = 2;
    oneof term {
      cs3.storageproviderv0alpha.ResourceId resource_id = 3;
      cs3.types.UserId owner = 4;
      cs3.types.UserId creator = 5;
    }
  }
  // OPTIONAL.
  // The list of filters to apply if any.
  repeated Filter filters = 2;
}

message ListPublicSharesResponse {
  // REQUIRED.
  // The response status.
  cs3.rpc.Status status = 1;
  // OPTIONAL.
  // Opaque information.
  cs3.types.Opaque opaque = 2;
  // REQUIRED.
  // The list of shares.
  repeated PublicShare share = 3;
}

message RemovePublicShareRequest {
  // OPTIONAL.
  // Opaque information.
  cs3.types.Opaque opaque = 1;
  // REQUIRED.
  // The reference to which the action should be performed.
  PublicShareReference ref = 2;
}

message RemovePublicShareResponse {
  // REQUIRED.
  // The response status.
  cs3.rpc.Status status = 1;
  // OPTIONAL.
  // Opaque information.
  cs3.types.Opaque opaque = 2;
}

message GetPublicShareRequest {
  // OPTIONAL.
  // Opaque information.
  cs3.types.Opaque opaque = 1;
  // REQUIRED.
  // The reference to which the action should be performed.
  PublicShareReference ref = 2;
}

message GetPublicShareResponse {
  // REQUIRED.
  // The response status.
  cs3.rpc.Status status = 1;
  // OPTIONAL.
  // Opaque information.
  cs3.types.Opaque opaque = 2;
  // REQUIRED.
  // The share.
  PublicShare share = 3;
}

message GetPublicShareByTokenRequest {
  // OPTIONAL.
  // Opaque information.
  cs3.types.Opaque opaque = 1;
  // REQUIRED.
  // The unlisted token to identify the public share.
  string token = 2;
}

message GetPublicShareByTokenResponse {
  // REQUIRED.
  // The response status.
  cs3.rpc.Status status = 1;
  // OPTIONAL.
  // Opaque information.
  cs3.types.Opaque opaque = 2;
  // REQUIRED.
  // The share.
  PublicShare share = 3;
}
